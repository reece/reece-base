#!//bin/env perl
## $Id: stat.pl,v 1.11 2000/02/24 19:39:58 reece Exp $

##############################################################################
## Nothing to modify beyond this line
##############################################################################

=head1 NAME

stat -- print file and directory information

S<$Id: stat.pl,v 1.11 2000/02/24 19:39:58 reece Exp $>

=head1 SYNOPSIS

C<stat [files]>

=head1 DESCRIPTION

B<stat> prints the user id (uid), group id (gid), mode, number of 
links, inode number, size, inode change (c) time, modification (m) time, and
last access (a) time.  Symbolic links are followed and the chase is displayed.

=head1 EXAMPLE

$ stat ~/bin/stat
/user/reece/bin/stat -> /user/reece/pub/src/stat.pl
  uid=   86, gid= 42, mode=0555, links= 1, inode=806961, size=   2415
  c=1997/10/19 22:18:02, m=1997/10/19 22:18:02, a=1997/11/05 08:50:00

=head1 RETURN VALUES

always 0

@@banner@@

=cut

##############################################################################
## Nothing to modify beyond this line
##############################################################################

use POSIX;

$RCSId = '$Id: stat.pl,v 1.11 2000/02/24 19:39:58 reece Exp $ ';
($jemappelle=$0) =~ s,^.*/,,;

@ARGV || die("Usage: $ARGV[0] [filenames]\n");

if ($ARGV[0]=~m/-v|-version/) {print($RCSId,"\n"); shift}

foreach $file (@ARGV)
  {
  $file =~ s,/*$,,;			# strip terminal /
  statfile($file);
  }

sub statfile
  {
  my ($file) = @_;

  print( prettyfile($file) );

  # follow sym links as far as possible, printing the trail along the way
  while ( $symlink = readlink($file) ) {
  if ($symlink =~ m,^/,)
	{
	# symlink is absolute pathname
	$file=$symlink;
	}
  else
	{
	# symlink is relative pathname
	$file =~ s,[^/]*$,,; # remove last part of path
	$file = $file . $symlink; # concat relative symlink to link path
	while ($file =~ s,/[^/]*/\.\./,/,g) {};	# remove /foo/.. backtracks
	$file =~ s,^[^/]*/\.\./,,; # remove any leading foo/.. backtrack
	}
  # print resulting chased filename, and relative path if it's different
  print(" -> ", prettyfile($file) );
  }

  print("\n");

  # stat the end of the sym link chase
  ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks)=lstat($file);
  ($ino) || do {warn($jemappelle,': ',$file,': ',$!,"\n"); next};

  printf("  uid=%5d, gid=%3d, mode=%04o, links=%2d, inode=%6d, size=%7d\n  c=%s, m=%s, a=%s\n"
		 , $uid, $gid, $mode & 4095, $nlink, $ino, $size,
		 , strftime("%Y/%m/%d %H:%M:%S", localtime($ctime))
		 , strftime("%Y/%m/%d %H:%M:%S", localtime($mtime))
		 , strftime("%Y/%m/%d %H:%M:%S", localtime($atime))
		 );
  }


sub prettyfile
  {
  my($e) = shift;
  # the order here is critical.
  # l before e (link exists, but file may not)
  $e . (  -l $e  ? '@'						# @ for links
       : !-e _   ? ''						# exists?
	   :  -d _  ? '/'						# / for directories
	   :          ''  );
  }
