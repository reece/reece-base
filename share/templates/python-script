#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function, unicode_literals

"""this is what I do"""
__version__ = '1.0.0'

import argparse
import ConfigParser
import logging
import os
import sys


defaults = {
	'conf-files': [os.path.expanduser(p) for p in [
		os.path.join('~','.config','global'),
		]]
    'verbose': 0,
    'list':  ['a','list'],
    'bool': True,
    'int': 42,
    'real': 4.2,
    'string': u'a string',
}


def parse_args(argv):
    # parse command line for configuration files
    ap = argparse.ArgumentParser(
        description = __doc__,
        formatter_class = argparse.ArgumentDefaultsHelpFormatter,
        add_help = False,
        )
    ap.add_argument('--conf-files', '-c',
					metavar="FILE",
					default = defaults['conf-file']
                    action = 'append',
                    help="config file")
    args, rem_argv = ap.parse_known_args()

    # read configuration files
    cp = ConfigParser.SafeConfigParser()
    cf_read = []
    if args.conf_file is None:
        # pkgdefaults < appdefaults < pkglocal < applocal < env
        args.conf_file = [ os.path.join( root_dir, 'etc', bn )
                           for bn in [ 'global', os.path.basename(__file__) ] ]
        cf_read = cp.read(args.conf_file)
    else:
        # open file to force errors when specified files don't exist
        for fn in args.conf_file:
            cp.readfp(open(fn))
    logging.info("%d conf_files: %s" % (len(cf_read), ', '.join(cf_read)))


    # parse command line options
    ap.add_argument('files',
                    nargs = '?',
                    default = '-')
    ap.add_argument('--help', '-h',
                    action = 'help')
    ap.add_argument('--verbose', '-v',
                    default = 0,
                    action = 'count',
                    help = 'set flag')
    ap.add_argument('--version', '-V',
                    action = 'version',
                    version = '%(prog)s '+__version__,
                    help = 'set flag')
    ap.add_argument('--list', '-l',
                    action = 'append',
                    help = '')
    ap.add_argument('--bool', '-b',
                    action = 'store_true',
                    help = 'set flag')
    ap.add_argument('--int', '-i',
                    type = int,
                    help = '')
    ap.add_argument('--real', '-r',
                    type = float,
                    help = '')
    ap.add_argument('--string', '-s',
                    type = unicode,
                    help = '')

    ap.set_defaults(**defaults)

    args = ap.parse_args( rem_argv )

    return args


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    opts = parse_args(sys.argv[1:])
	import pprint
    pprint.pprint(opts)
