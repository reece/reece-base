#!/usr/bin/env python3

import subprocess
from termcolor import colored

def get_local_branches():
    """Get a list of all local branches."""
    result = subprocess.run(['git', 'for-each-ref', '--format', '%(refname:short)', 'refs/heads/'],
                            capture_output=True, text=True, check=True)
    return result.stdout.strip().split('\n')

def branch_has_remote(branch):
    """Check if a remote branch exists for the given local branch."""
    result = subprocess.run(['git', 'show-ref', f'refs/remotes/origin/{branch}'],
                            capture_output=True, text=True)
    return result.returncode == 0

def get_ahead_behind(branch):
    """Get the ahead/behind status of the branch relative to main."""
    result = subprocess.run(['git', 'rev-list', '--left-right', '--count', f'{branch}...main'],
                            capture_output=True, text=True, check=True)
    try:
        ahead, behind = map(int, result.stdout.strip().split())
    except ValueError:
        ahead, behind = 0, 0
    return ahead, behind

def colorize(text, color=None):
    """Apply color to text if color is specified."""
    if color:
        return colored(text, color)
    return text

def main():
    # Ensure the main branch is up to date
    subprocess.run(['git', 'checkout', 'main'], check=True)
    subprocess.run(['git', 'pull'], check=True)

    # Column headers with fixed widths
    print(f"{'Remote':<8} {'Ahead':>6} {'Behind':>6} {'Branch Name'}")
    print("-" * 50)

    # Gather and display branch information
    for branch in get_local_branches():
        if branch == 'main':
            continue

        if branch_has_remote(branch):
            remote_status = colorize(f"{'✔':^8}", "green")
        else:
            remote_status = colorize(f"{'✘':^8}", "red")
         
        ahead, behind = get_ahead_behind(branch)
        ahead_text = colorize(f"{ahead:>6}", 'green' if ahead > 0 else None)
        behind_text = colorize(f"{behind:>6}", 'red' if behind > 0 else None)

        # Display formatted row with fixed-width columns
        print(f"{remote_status} {ahead_text} {behind_text} {branch}")

if __name__ == '__main__':
    main()
