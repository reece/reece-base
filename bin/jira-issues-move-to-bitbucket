#!/usr/bin/env python

__doc__ = """move issues from JIRA to bitbucket"""

import argparse
import collections
import ConfigParser
import itertools
import json
import logging
import os
import pprint
import sys

import prettytable
import requests
from jira.client import JIRA
import bitbucketeer.client


# map issue references
# add comments
# move attachments
# prepend original JIRA issue w/link
# subtasks?

fields = collections.OrderedDict([
    ('project key',     lambda o,i: i.fields.project.key ),
    ('components',      lambda o,i: ','.join([ c.name for c in i.fields.components ]) ),
    ('priority',		lambda o,i: i.fields.priority.name if i.fields.priority else '' ),
    ('fix versions',    lambda o,i: ','.join([ c.name for c in i.fields.fixVersions ]) ),
    ('issue key',       lambda o,i: i.key ),
    ('summary',         lambda o,i: i.fields.summary ),
    ('assignee',        lambda o,i: i.fields.assignee.name if i.fields.assignee else '' ),
    ('status',          lambda o,i: i.fields.status.name ),
    ('due date',        lambda o,i: i.fields.duedate if i.fields.duedate else '' ),
    ('updated',         lambda o,i: i.fields.updated if i.fields.updated else '' ),
    ('link',            lambda o,i: 'https://{o.jira_hostname}/browse/{i.key}'.format(o=o,i=i)),
    ])


def parse_args(argv):
    def sep_and_flatten(l):
        # split comma-sep elements and flatten list
        # e.g., ['a','b','c,d'] -> set('a','b','c','d')
        return None if len(l) == 0 else list( itertools.chain.from_iterable( e.split(',') for e in l ) )

    cf = ConfigParser.ConfigParser()
    cf.readfp(open(os.path.expanduser('~/.config/jira-issues-move-to-bitbucket.conf'),'r'))

    ap = argparse.ArgumentParser(
        description = __doc__
        )

    ap.add_argument(
        '--bitbucket-username', '-U',
        default = cf.get('default','bitbucket-username',None),
        )
    ap.add_argument(
        '--bitbucket-password', '-P',
        default = cf.get('default','bitbucket-password',None),
        )
    ap.add_argument(
        '--bitbucket-owner', '-O',
        default = cf.get('default','bitbucket-owner',None),
        )
    ap.add_argument(
        '--bitbucket-repo', '-R',
        default = cf.get('default','bitbucket-repo',None),
        )

    ap.add_argument(
        '--jira-hostname', '-H',
        default = cf.get('default','jira-hostname',None),
        help = 'host name of Jira instances (used for url like https://hostname/, e.g., "instancename.jira.com")',
        )
    ap.add_argument(
        '--jira-username', '-u',
        default = cf.get('default','jira-username',None),
        )
    ap.add_argument(
        '--jira-password', '-p',
        default = cf.get('default','jira-password',None),
        )
    ap.add_argument(
        '--jira-projects', '-j',
        action = 'append',
        default = [],
        help = 'project key (e.g., JRA); multiple and comma-separated okay',
        )
    ap.add_argument(
        '--jira-issues', '-i',
        action = 'append',
        default = [],
        help = 'issue id (e.g., JRA-9); multiple and comma-separated okay; default = all in project',
        )
    ap.add_argument(
        '--jira-components', '-c',
        action = 'append',
        default = [],
        help = 'components (e.g., frobonicator); multiple and comma-separated okay; default = all in project',
        )

    ap.add_argument(
        '--owners', '-o',
        action = 'append',
        default = [],
        )

    opts = ap.parse_args(argv)

    opts.jira_projects = sep_and_flatten(opts.jira_projects)
    opts.jira_components = sep_and_flatten(opts.jira_components)
    opts.jira_issues = sep_and_flatten(opts.jira_issues)

    if opts.jira_projects is None and opts.jira_issues is None:
        raise RuntimeError("You must specify either projects or issues")

    return opts


def fetch_issues(opts,jira):
    jql = []
    if opts.jira_issues:
        jql += [ ' OR '.join([ 'issue = '+i for i in opts.jira_issues ]) ]
    if opts.jira_projects:
        jql += [ ' OR '.join([ 'project = '+p for p in opts.jira_projects ]) ]
    if opts.jira_components:
        jql += [ ' OR '.join([ 'component = '+c for c in opts.jira_components ]) ]
    jql_str = ' AND '.join(jql)
    logging.info('executing query ' + jql_str)
    return jira.search_issues(jql_str)


def jira_to_bitbucket_issue(opts,ji):
    priority_map = {
        'Critical (P1)': 'critical',
        'Major (P2)': 'major',
        'Minor (P3)': 'minor',
        'Nice (P4)': 'trivial',
        }
    person_map = {
        'reece.hart': 'reece',
        'rudy.rico': 'rrico',
        'vincent.fusaro': 'vfusaro',
        }
    issuetype_map = {
        'Improvement': 'enhancement',
        'New Feature': 'enhancement',
        'Bug': 'bug',
        'Technical task': 'task',
        'Task': 'task',
        }
    status_map = {
        'Open': 'new',
        'Closed': 'resolved',
        'Resolved': 'resolved',
        'In Progress': 'open',
        }
    return {
        'title': ji.fields.summary,
        'content': ji.fields.description,
        'status': status_map[ji.fields.status.name],
        'priority': priority_map[ji.fields.priority.name],
        'responsible': None if ji.fields.assignee is None else person_map[ji.fields.assignee.name],
        'kind': issuetype_map[ji.fields.issuetype.name],
        'component': None,
        'milestone': None,
        'version': None,
        }



if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    opts = parse_args(sys.argv[1:])
    
    jira = JIRA({'server': 'https://{opts.jira_hostname}/'.format(opts=opts)},
        basic_auth=(opts.jira_username,opts.jira_password))

    jc = bitbucketeer.client.JSONClient(opts.bitbucket_username,
                                        opts.bitbucket_password)
    pc = bitbucketeer.client.PythonClient(jc)

    for ji in fetch_issues(opts,jira)[:5]:
        import IPython; IPython.embed()
bb_data = jira_to_bitbucket_issue(opts,ji)
        logging.info('adding issue {ji.key}: {j} -> {b}\n'.format(
            ji=ji,
            j=pprint.pformat({'key':ji.key, 'summary':ji.fields.summary}),
            b=pprint.pformat(bb_data),
            ))
        bbi = pc.post_issue(opts.bitbucket_owner,opts.bitbucket_repo,bb_data)



if False:
    jira_issues = fetch_issues(opts,jira)[:5]
    pt = prettytable.PrettyTable(field_names = fields.keys())
    for ji in jira_issues:
        pt.add_row([ fx(opts,ji) or '' for fx in fields.values() ])
    print(pt)


    bb_fields = ['title', 'content', 'status', 'priority', 'responsible',
                 'kind', 'component', 'milestone', 'version',]
    pt = prettytable.PrettyTable(field_names = bb_fields)
    for ji in jira_issues:
        import IPython; IPython.embed()
        bb_data = jira_to_bitbucket_issue(opts,ji)
        pt.add_row([ bb_data[f] for f in bb_fields ])
        logging.info('adding issue ' + pprint.pformat(bb_data))
        bbi = pc.post_issue(opts.bitbucket_owner,opts.bitbucket_repo,bb_data)
    print(pt)

    

    
if False:
    logging.basicConfig(level=logging.DEBUG)

    repos = json.loads(requests.get(
        url='https://bitbucket.org/api/2.0/user/repositories',
        auth=(opts.user, opts.password),
        ).content.decode('utf-8'))
    
    # split owners elements on commas, and flatten to a set
    owners = set( itertools.chain.from_iterable( oe.split(',') for oe in opts.owners ) )
    
    pt = prettytable.PrettyTable(field_names=fields)
    for repo in repos:
        if repo['owner'] in owners:
            repo['url'] = 'https://bitbucket.org/{repo[owner]}/{repo[slug]}'.format(repo=repo)
            repo['ssh'] = 'ssh://hg@bitbucket.org/{repo[owner]}/{repo[slug]}'.format(repo=repo)
            pt.add_row([ repo[k] for k in fields ])
            
    print(pt)
