#!/usr/bin/env python

__doc__ = """move issues from JIRA to bitbucket"""

import argparse
import collections
import configparser
import itertools
import json
import logging
import os
import pprint
import re
import sys

from jira.client import JIRA

from bitbucket.bitbucket import Bitbucket

# map issue references
# add comments
# move attachments
# prepend original JIRA issue w/link
# subtasks?

fields = collections.OrderedDict([
    ('project key',     lambda o,i: i.fields.project.key ),
    ('components',      lambda o,i: ','.join([ c.name for c in i.fields.components ]) ),
    ('priority',		lambda o,i: i.fields.priority.name if i.fields.priority else '' ),
    ('fix versions',    lambda o,i: ','.join([ c.name for c in i.fields.fixVersions ]) ),
    ('issue key',       lambda o,i: i.key ),
    ('summary',         lambda o,i: i.fields.summary ),
    ('assignee',        lambda o,i: i.fields.assignee.name if i.fields.assignee else '' ),
    ('status',          lambda o,i: i.fields.status.name ),
    ('due date',        lambda o,i: i.fields.duedate if i.fields.duedate else '' ),
    ('updated',         lambda o,i: i.fields.updated if i.fields.updated else '' ),
    ('link',            lambda o,i: 'https://{o.jira_hostname}/browse/{i.key}'.format(o=o,i=i)),
    ])


def parse_args(argv):
    def sep_and_flatten(l):
        # split comma-sep elements and flatten list
        # e.g., ['a','b','c,d'] -> set('a','b','c','d')
        return None if len(l) == 0 else list( itertools.chain.from_iterable( e.split(',') for e in l ) )

    cf = configparser.ConfigParser()
    cf.readfp(open(os.path.expanduser('~/.config/jira-issues-move-to-bitbucket.conf'),'r'))

    ap = argparse.ArgumentParser(
        description = __doc__
        )

    ap.add_argument(
        '--bitbucket-username', '-U',
        default = cf.get('default','bitbucket-username',fallback=None),
        )
    ap.add_argument(
        '--bitbucket-password', '-P',
        default = cf.get('default','bitbucket-password',fallback=None),
        )
    ap.add_argument(
        '--bitbucket-owner', '-O',
        default = cf.get('default','bitbucket-owner',fallback=None),
        )
    ap.add_argument(
        '--bitbucket-repo', '-R',
        default = cf.get('default','bitbucket-repo',fallback=None),
        )

    ap.add_argument(
        '--jira-hostname', '-H',
        default = cf.get('default','jira-hostname',fallback=None),
        help = 'host name of Jira instances (used for url like https://hostname/, e.g., "instancename.jira.com")',
        )
    ap.add_argument(
        '--jira-username', '-u',
        default = cf.get('default','jira-username',fallback=None),
        )
    ap.add_argument(
        '--jira-password', '-p',
        default = cf.get('default','jira-password',fallback=None),
        )
    ap.add_argument(
        '--jira-projects', '-j',
        action = 'append',
        default = [],
        help = 'project key (e.g., JRA); multiple and comma-separated okay',
        )
    ap.add_argument(
        '--jira-issues', '-i',
        action = 'append',
        default = [],
        help = 'issue id (e.g., JRA-9); multiple and comma-separated okay; default = all in project',
        )
    ap.add_argument(
        '--jira-components', '-c',
        action = 'append',
        default = [],
        help = 'components criterion; multiple and comma-separated okay; default = all in project',
        )


    opts = ap.parse_args(argv)

    opts.jira_projects = sep_and_flatten(opts.jira_projects)
    opts.jira_components = sep_and_flatten(opts.jira_components)
    opts.jira_issues = sep_and_flatten(opts.jira_issues)

    if opts.jira_projects is None and opts.jira_issues is None:
        raise RuntimeError("You must specify either projects or issues")

    return opts


def fetch_issues(opts,jira):
    jql = []
    if opts.jira_issues:
        jql += [ ' OR '.join([ 'issue = '+i for i in opts.jira_issues ]) ]
    if opts.jira_projects:
        jql += [ ' OR '.join([ 'project = '+p for p in opts.jira_projects ]) ]
    if opts.jira_components:
        jql += [ ' OR '.join([ 'component = '+c for c in opts.jira_components ]) ]
    jql_str = ' AND '.join(jql)
    logging.info('executing query ' + jql_str)
    return jira.search_issues(jql_str)

def link(url,text=None):
    return "[{text}]({url})".format(url=url,text=url if text is None else text)

def process_description(desc):
    def _indent4(mo):
        i = "    "
        return i + mo.group(1).replace("\n",i)
    #desc = desc.replace("\r","")
    return re.sub("{noformat}(.+?){noformat}",_indent4,desc,flags=re.DOTALL+re.MULTILINE)


def jira_to_bitbucket_issue(opts,ji):
    """convert a jira issue to a dictionary with values appropriate for
    POSTing as a bitbucket issue"""

    priority_map = {
        'Critical (P1)': 'critical',
        'Major (P2)': 'major',
        'Minor (P3)': 'minor',
        'Nice (P4)': 'trivial',
        }
    person_map = {
        'reece.hart': 'reece',
        'rudy.rico': 'rrico',
        'vincent.fusaro': 'vfusaro',
        'alex.gottschalk': 'reece',
        }
    issuetype_map = {
        'Improvement': 'enhancement',
        'New Feature': 'enhancement',
        'Bug': 'bug',
        'Technical task': 'task',
        'Task': 'task',
        }
    status_map = {
        'Open': 'new',
        'Closed': 'resolved',
        'Resolved': 'resolved',
        'In Progress': 'open',
        }

    logger = logging.getLogger(__name__)

    content = "imported from "+link("https://invitae.jira.com/browse/"+ji.key,ji.key)
    if ji.fields.description:
        content += "\n\n" + process_description(ji.fields.description)

    if ji.fields.assignee is None:
        resp = None
    else:
        try:
            resp = person_map[ji.fields.assignee.name]
        except:
            resp = default_responsible
            #TODO: create comment
            #TODO: logger

    milestone = None
    if ji.fields.fixVersions:
        if len(ji.fields.fixVersions) > 1:
            logger.warn("{ji.key}: bitbucket issues may have only 1 milestone (JIRA fixVersion); using only first".format(ji=ji))
        milestone = ji.fields.fixVersions[0].name

    return {
        'title': ji.fields.summary,
        'content': content,
        'status': status_map[ji.fields.status.name],
        'priority': priority_map[ji.fields.priority.name],
        'responsible': resp,
        'kind': issuetype_map[ji.fields.issuetype.name],
        'component': None,
        'milestone': milestone,
        'version': None,
        }






if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    opts = parse_args(sys.argv[1:])
    
    jira = JIRA({'server': 'https://{opts.jira_hostname}/'.format(opts=opts)},
        basic_auth=(opts.jira_username,opts.jira_password))

    bb = Bitbucket(opts.bitbucket_username,opts.bitbucket_password,opts.bitbucket_repo)

    for ji in fetch_issues(opts,jira):
        bb_data = jira_to_bitbucket_issue(opts,ji)
        pprint.pprint(bb_data)
        logger.debug('adding issue {ji.key}: {j} -> {b}\n'.format(
            ji=ji,
            j=pprint.pformat({'key':ji.key, 'summary':ji.fields.summary}),
            b=pprint.pformat(bb_data),
            ))
        s,r = bb.issue.create(**bb_data)
        
        import IPython; IPython.embed()


        if s:
            logger.info("moved {ji.key} (ji.fields.summary) to {r[local_id]} (https://bitbucket.org/reece/{opts.bitbucket_repo}/issue/{r[local_id]})".format(
                ji=ji,opts=opts,r=r))
        else:
            logger.error("moving {ji.key} ({ji.fields.summary}) failed: {r}".format(ji=ji,r=r))
            import IPython; IPython.embed()
