#!/usr/bin/env python3
# Remove s3, ec2, and ec2 vols specified in yaml
#
# $ aws-cleanup deletes.yaml
# where deletes.yaml looks like:
#   profile-name:
#     ec2:
#       us-east-2:
#         - i-0007e
#         - i-046f1
#     s3:
#       - some-bucket
#       - another-bucket
#
# and profile-name must have a corresponding entry in ~/.aws/credentials


import concurrent.futures
import logging
import sys

import boto3
import botocore

import coloredlogs
import yaml


_logger = logging.getLogger()


if __name__ == "__main__":
    coloredlogs.install(level="INFO")

    deletes = yaml.load(open(sys.argv[1]), Loader=yaml.SafeLoader)

    for profile in deletes:
        s = boto3.session.Session(profile_name = profile)
        s3 = s.resource("s3")

        def delete_bucket(bucket_name):
            _logger.info(f"{profile}: {bucket_name}: deleting...")
            b = s3.Bucket(name=bucket_name)
            try:
                r1 = b.objects.delete()
                if r1 and  "Errors" in r1[0]:
                    e0 = r1[0]["Errors"][0]
                    _logger.error(f"{profile}: s3 bucket {bucket_name}/{e0['Key']}: e0['Code']")
                    return
                r2 = b.object_versions.delete()
                l1 = len(r1[0]["Deleted"]) if r1 else 0
                l2 = len(r2[0]["Deleted"]) if r2 else 0
                b.delete()
                _logger.info(f"{profile}: deleted s3 bucket {bucket_name} ({l1} objects, {l2} versions)")
            except botocore.exceptions.ClientError as error:
                _logger.error(f"{profile}: s3 bucket {bucket_name}: {error.response['Error']['Code']}!")
                return

        buckets_to_delete = set(deletes[profile].get("s3", []))
        _logger.info(f"{profile}: {len(buckets_to_delete)} buckets to delete")
        with concurrent.futures.ThreadPoolExecutor(max_workers=20) as ex:
            ex.map(delete_bucket, buckets_to_delete)

        continue

        ec2_region_instances = deletes[profile].get("ec2", {})
        for region, instances in ec2_region_instances.items():
            ec2_client = s.client("ec2", region)
            _logger.info(f"{profile} {region}: stopping {len(instances)} ec2 instances")
            for i in instances:
                try:
                    r = ec2_client.terminate_instances(InstanceIds=[i])
                except botocore.exceptions.ClientError as error:
                    _logger.error(f"{profile}: ec2 instance {i}: {error.response['Error']['Code']}!")
                    continue
                _logger.info(f"{profile} {region}: {i}: Terminated")

        vol_region_instances = deletes[profile].get("vol", {})
        for region, vols in vol_region_instances.items():
            ec2_client = s.client("ec2", region)
            _logger.info(f"{profile} {region}: deleting {len(vols)} ec2 volumes")
            for v in vols:
                try:
                    r = ec2_client.delete_volume(VolumeId=v)
                except botocore.exceptions.ClientError as error:
                    _logger.error(f"{profile}: ec2 volume {v}: {error.response['Error']['Code']}!")
                    continue
                _logger.info(f"{profile} {region}: {v}: Deleted")
