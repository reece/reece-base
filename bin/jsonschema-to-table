#!/usr/bin/env python3
"""dump jsonschema as table for documentation

  $ jsonschema-to-table <germline_mutation_report_schema.json
  dateApproved	string	True	Date report was signed off
  copyNumberAlterations	array[object]	False	
  └╴approximateGenomicStopPosition	array	False	For imprecise assays; Stop position range
  └╴chromosome	enum	True	The chromosome where the alteration exists
  └╴acmgEvidenceClassification	enum	False	ACMG evidence category supporting the alteration's classification
  └╴frequencyInPopulation	string	False	ESP, 1000genomes
  ...

"""

import json
import sys

def process_node(n, level=0):
    required = n.get("required", [])
    for pname,pdef in n["properties"].items():
        ptype = "enum" if ("enum" in pdef) else pdef["type"]
        type_ = ptype

        if type_ == "array":
            items = pdef["items"]
            if isinstance(items, dict):
                t = items["$ref"] if "$ref" in items else items["type"]
                ptype += "[" + t + "]"

        yield dict(
            level=level,
            name=pname,
            type=ptype,
            description=pdef.get("description", None),
            required=pname in required,
            )

        if type_ == "object":
            for d in process_node(pdef, level=level+1):
                yield d
        elif type_ == "array":
            items = pdef["items"]
            if isinstance(items, dict):
                if "type" in items and items["type"] == "object":
                    for d in process_node(items, level=level+1):
                        yield d
            elif isinstance(items, list):
                pass            # unhandled for now
                

def _indent_str(l):
    return "" if l==0 else "  "*(l-1) + "└╴"


def dump_node(node, name):
    print("## " + name)

    if "properties" not in node:
        print("(empty)")
        return

    for d in process_node(node):
        print("\t".join([
            _indent_str(d["level"]) + d["name"],
            d["type"],
            str(d["required"]),
            d["description"] or "",
            ]))



if __name__ == "__main__":
    fh = open(sys.argv[1]) if len(sys.argv) > 1 else sys.stdin
    schema = json.loads(fh.read())
    
    dump_node(schema, "root schema")
    
    if "definitions" in schema:
        for key, node in schema["definitions"].items():
            dump_node(node, key)
    
