#!/usr/bin/env python
# update mendeley database with pubmed ids when doi is available

from __future__ import print_function

import argparse
import os
import logging
import re
import sqlite3
import sys
from Bio import Entrez

tag = os.path.basename(sys.argv[0])
Entrez.tool = tag
Entrez.email = 'reecehart@gmail.com'

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')

parser = argparse.ArgumentParser(
    description='add pubmed ids to documents that have DOIs')
parser.add_argument(
    '--database-path', '--db',
    default=os.path.expanduser(
        '~/.local/share/data/Mendeley Ltd./Mendeley Desktop/'
        'reece@harts.net@www.mendeley.com.sqlite'),
        help='Mendeley database file')
args = parser.parse_args()

sel_sql = """
select id,doi,pmid,title
from Documents D
where deletionPending is 'false'
	and pmid is NULL
	and doi is not NULL
	and confirmed='false'
"""

upd_sql = """
update Documents
set pmid=:pmid,confirmed='false'
where id = :id
"""

tag_sql = """
insert into DocumentTags values (:documentId,:tag)
"""

def sliced_dois(doi):
    """return a list of likely dois for the given doi-ish string, perhaps
    laden with bogus suffixes"""
    return [ 
        doc['doi'],
        re.sub(r'\[-.]\w*$','',doi),
        ]

def row_dict_factory(cur, row):
    return dict( (d[0],row[i]) for i,d in enumerate(cur.description) )

logging.info('Opening '+args.database_path)
conn = sqlite3.connect(args.database_path)
conn.row_factory = row_dict_factory

sel_cur = conn.cursor()
sel_cur.execute(sel_sql)
upd_cur = conn.cursor()
tag_cur = conn.cursor()

docs = sel_cur.fetchall()
logging.info(u'%d documents to update' % (len(docs)))
for doc in docs:
    for doi in sliced_dois(doc['doi']):
        res = Entrez.read(Entrez.esearch(
                db='pubmed',term='%s[doi]'%(doi)))
        if int(res['Count']) == 1:
            break
    if int(res['Count']) == 0:
        logging.info(u'No pubmed id for {doi} ({title})?'.format(**doc))
        continue
    if int(res['Count']) > 1:
        logging.info(u'more that one pubmed id for {doi} ({title})?'.format(**doc))
        continue

    pmid = int(res['IdList'][0])

    doc['pmid'] = pmid
    upd_cur.execute(upd_sql,{'pmid':pmid, 'id': doc['id']})
    tag_cur.execute(tag_sql,{'tag': tag, 'documentId': doc['id']})
    logging.info(u'{id}: {doi} -> {pmid} ({title})'.format(**doc))

conn.commit()
