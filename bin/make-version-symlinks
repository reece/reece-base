#!/usr/bin/env python3
"""given a release version tag x.y.z, create symlinks x.y → x.y.z and x → x.y

If given many symlinks, it will generate all in sorted order so that the result is asserted to be
correct.  In other words, this script works both to add a single version tag and to add/regenerate
for a set of release tags.

AUTHOR: Reece Hart <reecehart@gmail.com>
LICENSE: MIT

"""

import os
import logging
import re
import sys

logging.basicConfig(level="INFO")
_logger = logging.getLogger(__name__)

version_re = re.compile(r"^\d+\.\d+\.\d+$")

versions = sys.argv[1:]

bogus_versions = [v for v in versions if not version_re.match(v)]
if bogus_versions:
    raise ValueError(f"{len(bogus_versions)} bogus version tags ({bogus_versions})")

version_tuples = [tuple(map(int, v.split("."))) for v in versions]

# symlinks: a list of symlinks to make (x -> xy, xy -> xyz)
symlinks = {}
for x, y, z in sorted(version_tuples):
    x, xy, xyz = f"{x}", f"{x}.{y}", f"{x}.{y}.{z}"
    symlinks[x] = xy
    symlinks[xy] = xyz

for linkname, target in symlinks.items():
    try:
        os.unlink(linkname)
    except FileNotFoundError:
        pass
    os.symlink(dst=linkname, src=target)  # dst -> src
    _logger.info(f"{linkname} → {target}")
