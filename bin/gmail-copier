#!/usr/bin/env python3.3
__doc__ = """
copy email from one Google account to another

Config looks like this:

[gmail-copier]
src_account = acct1@gmail.com
src_host = imap.gmail.com
src_password = 
src_port = 993
src_mbox = [Gmail]/All Mail

dst_account = acct2@gmail.com
dst_host = imap.gmail.com
dst_password = 
dst_port = 993
dst_mbox = SomeLabel
"""

import argparse, datetime, email
import logging, os, sys, time
from configparser import SafeConfigParser
from imapclient import IMAPClient

import IPython

def parse_args(argv):
    ap = argparse.ArgumentParser(
        description = __doc__,
        formatter_class = argparse.ArgumentDefaultsHelpFormatter,
        add_help = False,
        )
    ap.add_argument('--conf-file', '-C', metavar="FILE",
                    required = True,
                    help="config file")
    opts = ap.parse_args(argv)
    return opts

def email_to_imap_date(date):
    """convert email header date like 'Thu, 23 Aug 2012 16:39:31 -0700'
    to imap date like '23-Aug-2012 16:39:31 -0700'"""
    vals = date.split(' ')
    return '"{vals[1]}-{vals[2]}-{vals[3]} {vals[4]} {vals[5]}"'.format(vals=vals)

def _hdr_tuple(hdr):
    e = email.message_from_string( hdr )
    return ( e['date'],e['from'],e['to'],e['subject'],e['message-id'] )


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    opts = parse_args(sys.argv[1:])
    conf = SafeConfigParser()
    conf.readfp(open(opts.conf_file))
    logging.info('opened '+opts.conf_file)
    opts.__dict__.update(conf.items('gmail-copier'))


    # open destination mbox
    dst = IMAPClient(host = opts.dst_host, port = opts.dst_port,
                        use_uid = True, ssl = True)
    dst.login(opts.dst_account, opts.dst_password)
    logging.info('dst: connected to %s:***@%s:%s' % (
            opts.dst_account, opts.dst_host, opts.dst_port))

    # open source mbox
    src = IMAPClient(host = opts.src_host, port = opts.src_port,
                        use_uid = True, ssl = True)
    src.login(opts.src_account, opts.src_password)
    logging.info('src: connected to %s:***@%s:%s' % (
            opts.src_account, opts.src_host, opts.src_port))

    # select folders
    src_ex = src.select_folder(opts.src_mbox, readonly=True)
    dst_ex = dst.select_folder(opts.dst_mbox, readonly=False)
    logging.info('{src_ex[EXISTS]} messages in src, {dst_ex[EXISTS]} messages in dst'.format(
        src_ex = src_ex, dst_ex = dst_ex))

    # hash destination message headers
    dst_msgs = dst.search()
    dst_hdrs = dst.fetch(dst_msgs, ['FLAGS', 'RFC822.SIZE', 'RFC822.HEADER'])
    dst_hts = [ _hdr_tuple(dst_hdrs[msgid]['RFC822.HEADER']) for msgid in dst_hdrs ]

    # loop over messages in src, copying if not in dst
    src_msgs = src.search()
    src_hdrs = src.fetch(src_msgs, ['FLAGS', 'RFC822.SIZE', 'RFC822.HEADER'])
    src.debug = 4
    for src_msgid in src_hdrs:
        ht = _hdr_tuple(src_hdrs[src_msgid]['RFC822.HEADER'])
        if ht in dst_hts:
            #logging.info('{ht} in destination; skipping'.format(ht=ht))
            continue
                
        src_msg = src.fetch(src_msgid, ['RFC822'])
        try:
            logging.info(u'{ht}: not in dst; appending...'.format(ht=ht))
            em = email.message_from_string(src_msg[src_msgid]['RFC822'])
            response = dst.append(opts.dst_mbox,
                                  src_msg[src_msgid]['RFC822'].decode('utf-8'),
                                  [r'\Seen'],
                                  email.utils.parsedate_to_datetime(em['date']))
            logging.info(u'{ht}: appended'.format(ht=ht))
        except Exception as e:
            logging.error("!! {ht}: {e}".format(ht=ht,e=e))
            import IPython; IPython.embed()
            continue
